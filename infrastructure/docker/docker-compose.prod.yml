version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres-prod:
    image: postgres:15-alpine
    container_name: allodoc_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ../../src/api/src/database/init/01-create-extensions.sql:/docker-entrypoint-initdb.d/01-create-extensions.sql:ro
      # Backup volume
      - postgres_prod_backup:/backups
    ports:
      - '5433:5432'  # Different port to avoid conflicts
    networks:
      - medical_prod_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}']
      interval: 30s
      timeout: 10s
      retries: 5
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false  # Database needs write access
    tmpfs:
      - /run
      - /tmp

  # Redis for production caching/sessions
  redis-prod:
    image: redis:7-alpine
    container_name: allodoc_redis_prod
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - '6380:6379'  # Different port to avoid conflicts
    volumes:
      - redis_prod_data:/data
    networks:
      - medical_prod_network
    healthcheck:
      test: ['CMD', 'redis-cli', '--auth', '${REDIS_PASSWORD:-changeme}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    # Security options
    security_opt:
      - no-new-privileges:true

  # Production API Application
  api-prod:
    build:
      context: ../../src/api
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: allodoc-api:latest
    container_name: allodoc_api_prod
    restart: always
    ports:
      - '3000:3000'
    env_file:
      - .env.production
    networks:
      - medical_prod_network
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    # Health check for the application
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true  # Application should be read-only
    tmpfs:
      - /tmp
      - /app/logs

  # Nginx Reverse Proxy (optional but recommended)
  nginx-prod:
    image: nginx:alpine
    container_name: allodoc_nginx_prod
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ../nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - medical_prod_network
    depends_on:
      - api-prod
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /var/cache/nginx

volumes:
  postgres_prod_data:
    driver: local
  postgres_prod_backup:
    driver: local
  redis_prod_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  medical_prod_network:
    driver: bridge
    name: medical_prod_network
    ipam:
      config:
        - subnet: 172.20.0.0/16