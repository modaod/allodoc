name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.meta.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Check image exists
        run: |
          docker pull ${{ steps.meta.outputs.tags }} || {
            echo "Error: Docker image not found. Please ensure CI pipeline completed successfully."
            exit 1
          }

      - name: Validate production readiness
        working-directory: ./backend
        run: |
          # Check if production environment file exists
          if [ ! -f ".env.production" ]; then
            echo "Error: .env.production file not found"
            exit 1
          fi
          
          # Run production readiness check
          ./scripts/deployment/check-production-readiness.sh

      - name: Notify deployment start
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "üöÄ Starting deployment of AlloDoc to ${{ github.event.inputs.environment || 'production' }}",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Environment", "value": "${{ github.event.inputs.environment || 'production' }}", "short": true},
                  {"title": "Image", "value": "${{ steps.meta.outputs.tags }}", "short": true},
                  {"title": "Triggered by", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  backup:
    name: Backup Current State
    runs-on: self-hosted  # Assumes production server is self-hosted runner
    needs: pre-deployment
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Create database backup
        run: |
          cd /opt/allodoc
          ./backend/scripts/backup-database.sh

      - name: Backup current Docker images
        run: |
          docker tag allodoc-backend:latest allodoc-backend:backup-$(date +%Y%m%d-%H%M%S) || true
          docker system prune -f

  deploy:
    name: Deploy Application
    runs-on: self-hosted
    needs: [pre-deployment, backup]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          path: deployment

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest images
        run: |
          docker pull ${{ needs.pre-deployment.outputs.image-tag }}
          docker tag ${{ needs.pre-deployment.outputs.image-tag }} allodoc-backend:latest

      - name: Run database migrations
        run: |
          cd /opt/allodoc
          docker-compose -f infrastructure/docker/docker-compose.prod.yml exec -T backend-prod npm run migration:run

      - name: Deploy with zero downtime
        run: |
          cd /opt/allodoc
          
          # Copy new deployment files
          cp deployment/nginx/nginx.prod.conf nginx/
          cp deployment/infrastructure/docker/docker-compose.prod.yml backend/
          
          # Deploy with rolling update
          docker-compose -f infrastructure/docker/docker-compose.prod.yml up -d --no-deps backend-prod
          
          # Wait for health check
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
          # Update proxy
          docker-compose -f infrastructure/docker/docker-compose.prod.yml up -d nginx-prod

      - name: Post-deployment verification
        run: |
          cd /opt/allodoc
          ./deployment/scripts/post-deploy-checks.sh

      - name: Clean up old images
        run: |
          docker image prune -f
          docker system prune -f --volumes

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Run smoke tests
        run: |
          # Test critical endpoints
          curl -f https://app.allodoc.com/health
          curl -f https://app.allodoc.com/api/health
          
          # Test authentication endpoint
          curl -X POST -H "Content-Type: application/json" \
               -d '{"email":"test@example.com","password":"invalid"}' \
               https://app.allodoc.com/api/auth/login | grep -q "error"

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          environment: ${{ github.event.inputs.environment || 'production' }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "‚úÖ AlloDoc deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "‚ùå AlloDoc deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Emergency Rollback
    runs-on: self-hosted
    needs: [deploy]
    if: failure()
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout rollback scripts
        uses: actions/checkout@v4

      - name: Execute rollback
        run: |
          cd /opt/allodoc
          ./scripts/deployment/rollback.sh

      - name: Verify rollback
        run: |
          curl -f https://app.allodoc.com/health
          echo "Rollback completed successfully"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üîÑ Emergency rollback executed for AlloDoc",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {"title": "Environment", "value": "${{ github.event.inputs.environment || 'production' }}", "short": true},
                  {"title": "Status", "value": "Rollback completed", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}